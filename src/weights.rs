
//! Autogenerated weights for `pallet_smart_accounts`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-09-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `PAR03651`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("local-v")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/mythos-node
// benchmark
// pallet
// --chain
// local-v
// --pallet
// pallet_smart_accounts
// --extrinsic
// *
// --wasm-execution
// compiled
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/testnet/src/weights/pallet_smart_accounts.rs
// --template
// .maintain/template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_smart_accounts`.
pub trait WeightInfo {
	fn generate_account(c: u32, ) -> Weight;
	fn register_credentials(c: u32, ) -> Weight;
	fn unregister_credential() -> Weight;
}

/// Weights for `pallet_smart_accounts` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
	impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `System::BlockHash` (r:2 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `AccountSmartion::Credentials` (r:0 w:100)
	/// Proof: `AccountSmartion::Credentials` (`max_values`: None, `max_size`: Some(183), added: 2658, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn generate_account(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `54`
		//  Estimated: `6028`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(16_572_682, 6028)
			// Standard Error: 21_296
			.saturating_add(Weight::from_parts(10_913_221, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
	/// Storage: `AccountSmartion::Credentials` (r:0 w:100)
	/// Proof: `AccountSmartion::Credentials` (`max_values`: None, `max_size`: Some(183), added: 2658, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn register_credentials(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(2_587_026, 0)
			// Standard Error: 20_817
			.saturating_add(Weight::from_parts(10_895_981, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
	/// Storage: `AccountSmartion::Credentials` (r:1 w:1)
	/// Proof: `AccountSmartion::Credentials` (`max_values`: None, `max_size`: Some(183), added: 2658, mode: `MaxEncodedLen`)
	fn unregister_credential() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `3648`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 3648)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `System::BlockHash` (r:2 w:0)
	/// Proof: `System::BlockHash` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	/// Storage: `AccountSmartion::Credentials` (r:0 w:100)
	/// Proof: `AccountSmartion::Credentials` (`max_values`: None, `max_size`: Some(183), added: 2658, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn generate_account(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `54`
		//  Estimated: `6028`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(16_572_682, 6028)
			// Standard Error: 21_296
			.saturating_add(Weight::from_parts(10_913_221, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
	/// Storage: `AccountSmartion::Credentials` (r:0 w:100)
	/// Proof: `AccountSmartion::Credentials` (`max_values`: None, `max_size`: Some(183), added: 2658, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn register_credentials(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(2_587_026, 0)
			// Standard Error: 20_817
			.saturating_add(Weight::from_parts(10_895_981, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
	}
	/// Storage: `AccountSmartion::Credentials` (r:1 w:1)
	/// Proof: `AccountSmartion::Credentials` (`max_values`: None, `max_size`: Some(183), added: 2658, mode: `MaxEncodedLen`)
	fn unregister_credential() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `3648`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 3648)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
